# Copyright (c) 2021, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

default:
  image: docker:stable
  services:
    - docker:stable-dind

# The .dist- dummy steps set the DIST variable for the targeted distribution.
.dist-ubi8:
  variables:
    DIST: "ubi8"

.dist-ubuntu20:
  variables:
    DIST: "ubuntu20.04"

# The .build-mig-manager dummy step runs the make target to build mig-manager for the
# specified distribution. The IN_IMAGE, IN_VERSION, and DIST variables determine the
# generated docker image name.
.build-mig-manager:
  before_script:
    - 'echo Version: ${IN_VERSION} ; [[ -n "${IN_VERSION}" ]] || exit 1'
    - 'echo Dist: ${DIST} ; [[ -n "${DIST}" ]] || exit 1'

    - apk add --no-cache make bash

    - 'echo "Building ${IN_IMAGE}:${IN_VERSION}-${DIST}"'

    # This generates an image: ${IN_IMAGE}:${IN_VERSION}-${DIST}
    - make IMAGE="${IN_IMAGE}" VERSION="${IN_VERSION}" build-${DIST}

# The .pull-mig-manager dummy step pulls the image IN_IMAGE:IN_VERSION-DIST
.pull-mig-manager:
  before_script:
    - 'echo Version: ${IN_VERSION} ; [[ -n "${IN_VERSION}" ]] || exit 1'
    - 'echo Dist: ${DIST} ; [[ -n "${DIST}" ]] || exit 1'

    - '[[ -z "${IN_REGISTRY}" ]] || docker login -u "${IN_REGISTRY_USER}" -p "${IN_REGISTRY_TOKEN}" "${IN_REGISTRY}"'
    - 'echo Pulling "${IN_IMAGE}:${IN_VERSION}-${DIST}"'

    - docker pull ${IN_IMAGE}:${IN_VERSION}-${DIST}
    # Log out of the input registry
    - '[[ -z "${IN_REGISTRY}" ]] || docker logout'

# The .push-mig-manager dummy step tags the image IN_IMAGE:IN_VERSION-DIST as OUT_IMAGE:OUT_VERSION-DIST
# and pushes it to the putput registry
.push-mig-manager:
  script:
    - 'echo Version: ${IN_VERSION} ; [[ -n "${IN_VERSION}" ]] || exit 1'
    - 'echo Version: ${OUT_VERSION} ; [[ -n "${OUT_VERSION}" ]] || exit 1'
    - 'echo Dist: ${DIST} ; [[ -n "${DIST}" ]] || exit 1'

    - apk add --no-cache make bash

    - 'echo "Deploying ${IN_IMAGE}:${IN_VERSION}-${DIST} as ${OUT_IMAGE}:${OUT_VERSION}-${DIST}"'

    # Tag the output image (note the leading v is stripped from the VERSION)
    - docker tag "${IN_IMAGE}:${IN_VERSION}-${DIST}" "${OUT_IMAGE}:${OUT_VERSION}-${DIST}"

    - '[[ -z "${OUT_REGISTRY}" ]] || docker login -u "${OUT_REGISTRY_USER}" -p "${OUT_REGISTRY_TOKEN}" "${OUT_REGISTRY}"'

    # Invoke the make target. This includes logic for pushing short / latest versions
    # Note: The leading v is stripped from the version
    - '[[ -n "${USE_DOCKER_PUSH}" ]] || make IMAGE="${OUT_IMAGE}" VERSION="${OUT_VERSION}" push-${DIST}'
    - '[[ -z "${USE_DOCKER_PUSH}" ]] || docker push "${OUT_IMAGE}:${OUT_VERSION}-${DIST}"'

    - '[[ -z "${OUT_REGISTRY}" ]] || docker logout'


# .mig-manager-ci-input-image sets the IN_* variables to those of the gitlab CI
.mig-manager-ci-input-image:
  variables:
    IN_REGISTRY_USER: ${CI_REGISTRY_USER}
    IN_REGISTRY_TOKEN: ${CI_REGISTRY_PASSWORD}
    IN_REGISTRY: ${CI_REGISTRY}
    IN_IMAGE: "${CI_REGISTRY_IMAGE}/k8s-mig-manager"
    IN_VERSION: "${CI_COMMIT_SHA}"

# .mig-manager-ci-input-image sets the OUT_* variables to those of the gitlab CI
.mig-manager-ci-output-image:
  variables:
    OUT_REGISTRY_USER: ${CI_REGISTRY_USER}
    OUT_REGISTRY_TOKEN: ${CI_REGISTRY_PASSWORD}
    OUT_REGISTRY: ${CI_REGISTRY}
    OUT_IMAGE: "${CI_REGISTRY_IMAGE}/k8s-mig-manager"
    OUT_VERSION: "${CI_COMMIT_SHA}"

# .mig-manager-ci-staging-input-image sets the OUT_* variables to those of the gitlab CI
# using the final staging registry
.mig-manager-ci-staging-output-image:
  extends:
    - .mig-manager-ci-output-image
  variables:
    OUT_IMAGE: "${CI_REGISTRY_IMAGE}/staging/k8s-mig-manager"

# The build step build a docker image using the build-${DIST} make target and
# Pushes the generated image to the specified container registry
.build-and-push-mig-manager:
  stage: build
  extends:
    - .build-mig-manager
    - .mig-manager-ci-input-image
    - .push-mig-manager
    - .mig-manager-ci-output-image

# Releasing mig-manager consists of
# 1. pulling the mig-manager-ci-input-image
# 2. pushing the pulled image to the output registry
.release-mig-manager:
  stage: release
  extends:
    - .pull-mig-manager
    - .mig-manager-ci-input-image
    - .push-mig-manager

.release-mig-manager-external:
  extends:
    - .release-mig-manager
  variables:
    OUT_VERSION: ${CI_COMMIT_TAG}
  only:
    - tags

.release-mig-manager-staging:
  extends:
    - .release-mig-manager
    # Define the release targets
    - .mig-manager-ci-staging-output-image

release-mig-manager-staging-ubi8:
  extends:
    - .release-mig-manager-staging
    - .dist-ubi8

release-mig-manager-staging-ubuntu20:
  extends:
    - .release-mig-manager-staging
    - .dist-ubuntu20
